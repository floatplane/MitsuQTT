; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = src
test_dir = test
default_envs = WEMOS_D1_Mini, ESP8266-ESP01, ESP32DEV, WEMOS_D1_Mini-SPIFFS, ESP8266-ESP01-SPIFFS, ESP32DEV-SPIFFS

[env]
extra_scripts =
	pre:scripts/platformio/set_output_filename.py
	pre:scripts/platformio/set_dependencies.py
check_tool = clangtidy, cppcheck
check_flags =
	clangtidy: --checks '-*,bugprone-*,clang-analyzer-*,misc-*,performance-*,portability-*,readability-*,-readability-magic-numbers,-readability-static-accessed-through-instance,-readability-misplaced-array-index,google-*'
	cppcheck: --enable=all --disable=unusedFunction --inline-suppr --std=c++20 --suppress=*:*/.pio/* --suppress=unmatchedSuppression:*/.pio/*
check_skip_packages = no
check_src_filters = +<src/*> +<lib/*>
platform_packages =
	platformio/tool-clangtidy@1.150005.0
	platformio/tool-cppcheck@^1.21100.230717

[env:test-native]
platform = native
build_type = test
test_framework = doctest
lib_deps = 
	bblanchon/ArduinoJson @ ^7.0.2
build_flags = -std=gnu++17 -I ${platformio.test_dir}/helpers
debug_test = test_template

;
; Build settings shared across all targets. These are appended to or overridden by the target-specific settings.
;

[common]
build_flags =
	-Wall
	-DENABLE_LOGGING
	!python scripts/platformio/set_env.py
build_src_flags =
	!echo "-D LANGUAGE=${LANGUAGE:-en-us}"
	!echo "-I src/frontend/${LANGUAGE:-en-us}"
lib_deps = 
	bblanchon/ArduinoJson @ ^7.0.2
	knolleary/PubSubClient @ ^2.8
	floatplane/Ministache @ ^1.0.0
	swicago/HeatPump@^1.0.0
	https://github.com/kpfleming/arduino-timer-cpp17.git
	https://github.com/AlexIII/incbin-arduino

;
; Build settings shared across all ESP8266 targets. These are appended to or overridden by the target-specific settings.
;

[espressif8266]
platform = espressif8266
framework = arduino
extends = common
lib_deps = 
	${common.lib_deps}
	ESP32Async/ESPAsyncWebServer @ 3.6.0

;
; Build settings shared across all ESP32 targets. These are appended to or overridden by the target-specific settings.
;

[espressif32]
platform = espressif32
framework = arduino
extends = common
build_unflags = -std=gnu++11
build_flags = 
	${common.build_flags}
	-std=gnu++17
	-D CORE_DEBUG_LEVEL=0
lib_deps = 
	${common.lib_deps}
	ESP32Async/ESPAsyncWebServer @ 3.6.0

;
; ESP8266 targets
;

[env:ESP8266-ESP01]
extends = espressif8266
board = esp01_1m
monitor_speed = 115200
board_build.ldscript = eagle.flash.1m64.ld

[env:ESP8266-ESP01-SPIFFS]
extends = env:ESP8266-ESP01
; Ordering is intentional here; the USE_SPIFFS flag must be defined before the other build flags or it's silently dropped!
build_flags = -D USE_SPIFFS ${env:ESP8266-ESP01.build_flags}

;
; WEMOS_D1_Mini targets
;

[env:WEMOS_D1_Mini]
extends = espressif8266
board = d1_mini
monitor_speed = 115200
upload_speed = 460800
board_build.ldscript = eagle.flash.4m2m.ld

[env:WEMOS_D1_Mini-SPIFFS]
extends = env:WEMOS_D1_Mini
; Ordering is intentional here; the USE_SPIFFS flag must be defined before the other build flags or it's silently dropped!
build_flags = -D USE_SPIFFS ${env:WEMOS_D1_Mini.build_flags}

;
; ESP32DEV targets
;

[env:ESP32DEV]
extends = espressif32
board = esp32dev

[env:ESP32DEV-SPIFFS]
extends = env:ESP32DEV
build_flags = ${env:ESP32DEV.build_flags} -D USE_SPIFFS
